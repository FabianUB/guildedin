from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Float, Enum, Text, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from enum import Enum as PyEnum
from .database import Base

class NetworkActivityType(PyEnum):
    STOCK_PRICE_CHANGE = "stock_price_change"    # Guild stock moved significantly
    RANK_CHANGE = "rank_change"                  # Guild rank promotion/demotion
    DUNGEON_COMPLETION = "dungeon_completion"    # Major dungeon achievement
    CEO_ANNOUNCEMENT = "ceo_announcement"        # Strategic announcements from bot CEOs
    RECRUITMENT_NEWS = "recruitment_news"        # High-profile adventurer hiring
    FACILITY_UPGRADE = "facility_upgrade"        # Major facility improvements
    MARKET_MILESTONE = "market_milestone"        # Market cap or share price milestones
    COMPETITIVE_MOVE = "competitive_move"        # Strategic moves affecting competitors
    MARKET_NEWS = "market_news"                  # General market trends and analysis

class NetworkActivity(Base):
    """Enhanced activity feed showing guild market performance and CEO personalities"""
    __tablename__ = "network_activities"

    id = Column(Integer, primary_key=True, index=True)
    
    # Activity Classification
    activity_type = Column(Enum(NetworkActivityType), nullable=False)
    priority = Column(Integer, default=50)           # 0-100, higher = more prominent in feed
    
    # Content
    headline = Column(String, nullable=False)        # "AdventureCorp shares surge 25% after Dragon's Lair success"
    content = Column(Text, nullable=False)           # Full post content
    
    # Guild Context
    guild_id = Column(Integer, ForeignKey("guilds.id"), nullable=False)
    ceo_personality_influenced = Column(Boolean, default=False)  # Was this generated by bot CEO personality?
    
    # Market Data (if applicable)
    stock_price_before = Column(Float, nullable=True)
    stock_price_after = Column(Float, nullable=True)
    price_change_percent = Column(Float, nullable=True)
    
    # Engagement Metrics
    likes_count = Column(Integer, default=0)
    comments_count = Column(Integer, default=0)
    shares_count = Column(Integer, default=0)
    
    # Visual Elements
    emoji_reaction = Column(String, default="ðŸ“ˆ")    # Emoji representing the activity
    banner_color = Column(String, default="#3b82f6") # Color theme for the post
    
    # Metadata
    tags = Column(JSON, default=list)                # ["market_surge", "dungeon_success", "rank_A"]
    mentioned_guilds = Column(JSON, default=list)    # Other guilds referenced in post
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    scheduled_for = Column(DateTime(timezone=True), nullable=True)  # For delayed posts
    
    # Relationships
    guild = relationship("Guild")

class CEOPost(Base):
    """Bot CEO personality-driven posts for the network activity feed"""
    __tablename__ = "ceo_posts"

    id = Column(Integer, primary_key=True, index=True)
    
    # CEO Context
    ceo_id = Column(Integer, ForeignKey("bot_ceo_personalities.id"), nullable=False)
    guild_id = Column(Integer, ForeignKey("guilds.id"), nullable=False)
    
    # Post Content
    post_type = Column(String, nullable=False)       # "victory", "strategy", "market_analysis", "recruitment"
    subject = Column(String, nullable=False)         # What triggered this post
    content = Column(Text, nullable=False)           # Generated post content
    
    # Personality Influence
    personality_traits_used = Column(JSON, default=dict)  # Which traits influenced generation
    communication_style_applied = Column(String)     # Which style was used
    
    # Context Data
    triggered_by_event = Column(String, nullable=True) # "dungeon_success", "stock_surge", "competitor_move"
    market_context = Column(JSON, default=dict)       # Market conditions when posted
    
    # Performance Tracking
    engagement_score = Column(Integer, default=0)     # How well this post performed
    response_to_post_id = Column(Integer, nullable=True) # If responding to another post
    
    # Timestamps
    posted_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    ceo = relationship("BotCEOPersonality")
    guild = relationship("Guild")